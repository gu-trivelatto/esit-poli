from typing import List
from typing_extensions import TypedDict


### State

class GraphStateType(TypedDict):
    """
    Represents the state of the graph.

    Attributes:
        num_steps: number of steps already taken
        history: a list containing the history of user inputs and model outputs
        target_language: target language for translation if needed
        user_input: user input provided to the pipeline
        is_conversation: bypass to the output if the user is simply having a chat with the model
        selected_tool: tool selected to be used
        tool_query: next query generated for the 'general' tools, contains the query and the selected tool
        context: list of context gathered from the tools
        is_data_complete: boolean to indicate that all necessary context was gathered
        final_answer: final answer generated by the LLM, the one to be displayed to the user
    """
    num_steps: int
    history: List[dict]
    target_language: str
    user_input: str
    is_conversation: bool
    selected_tool: str
    tool_query: dict
    context: List[str]
    is_data_complete: bool
    final_answer: str
    
class GraphState:
    @staticmethod
    def initialize(user_input: str, history: List[dict]) -> 'GraphStateType':
        return GraphStateType({
            "num_steps": 0,
            "history": history,
            "target_language": '',
            "user_input": user_input,
            "is_conversation": False,
            "selected_tool": "",
            "tool_query": {},
            "context": [],
            "is_data_complete": False,
            "final_answer": ""
        })
